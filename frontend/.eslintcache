[{"C:\\job-portal\\job-portal-main\\frontend\\src\\index.js":"1","C:\\job-portal\\job-portal-main\\frontend\\src\\reportWebVitals.js":"2","C:\\job-portal\\job-portal-main\\frontend\\src\\App.js":"3","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Navbar.js":"4","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Login.js":"5","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Welcome.js":"6","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Signup.js":"7","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Profile.js":"8","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Applications.js":"9","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Home.js":"10","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Logout.js":"11","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"12","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\MyJobs.js":"13","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\JobApplications.js":"14","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\CreateJobs.js":"15","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\isAuth.js":"16","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\Profile.js":"17","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\MessagePopup.js":"18","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\PasswordInput.js":"19","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\apiList.js":"20","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\EmailInput.js":"21","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\FileUploadInput.js":"22"},{"size":500,"mtime":1612178250000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1612178250000,"results":"25","hashOfConfig":"24"},{"size":3332,"mtime":1612178250000,"results":"26","hashOfConfig":"24"},{"size":3823,"mtime":1745765802902,"results":"27","hashOfConfig":"24"},{"size":4868,"mtime":1745750330134,"results":"28","hashOfConfig":"24"},{"size":6966,"mtime":1745767165618,"results":"29","hashOfConfig":"24"},{"size":13717,"mtime":1745765428385,"results":"30","hashOfConfig":"24"},{"size":6018,"mtime":1745764407517,"results":"31","hashOfConfig":"24"},{"size":8659,"mtime":1745512998587,"results":"32","hashOfConfig":"24"},{"size":15321,"mtime":1745752416930,"results":"33","hashOfConfig":"24"},{"size":489,"mtime":1612178250000,"results":"34","hashOfConfig":"24"},{"size":24226,"mtime":1745508767137,"results":"35","hashOfConfig":"24"},{"size":23471,"mtime":1745510667385,"results":"36","hashOfConfig":"24"},{"size":28763,"mtime":1745510318240,"results":"37","hashOfConfig":"24"},{"size":10334,"mtime":1745509650588,"results":"38","hashOfConfig":"24"},{"size":165,"mtime":1612178250000,"results":"39","hashOfConfig":"24"},{"size":7135,"mtime":1745510839355,"results":"40","hashOfConfig":"24"},{"size":503,"mtime":1612178250000,"results":"41","hashOfConfig":"24"},{"size":1666,"mtime":1612178250000,"results":"42","hashOfConfig":"24"},{"size":437,"mtime":1612178250000,"results":"43","hashOfConfig":"24"},{"size":1103,"mtime":1745514135952,"results":"44","hashOfConfig":"24"},{"size":5780,"mtime":1745764333338,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"qggwsi",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\job-portal\\job-portal-main\\frontend\\src\\index.js",[],["98","99"],"C:\\job-portal\\job-portal-main\\frontend\\src\\reportWebVitals.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\App.js",["100"],"import { createContext, useState } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport Welcome, { ErrorPage } from \"./component/Welcome\";\nimport Navbar from \"./component/Navbar\";\nimport Login from \"./component/Login\";\nimport Logout from \"./component/Logout\";\nimport Signup from \"./component/Signup\";\nimport Home from \"./component/Home\";\nimport Applications from \"./component/Applications\";\nimport Profile from \"./component/Profile\";\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\nimport MyJobs from \"./component/recruiter/MyJobs\";\nimport JobApplications from \"./component/recruiter/JobApplications\";\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\nimport RecruiterProfile from \"./component/recruiter/Profile\";\nimport MessagePopup from \"./lib/MessagePopup\";\nimport isAuth, { userType } from \"./lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"98vh\",\n    paddingTop: \"64px\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n}));\n\nexport const SetPopupContext = createContext();\n\nfunction App() {\n  const classes = useStyles();\n  const [popup, setPopup] = useState({\n    open: false,\n    severity: \"\",\n    message: \"\",\n  });\n  return (\n    <BrowserRouter>\n      <SetPopupContext.Provider value={setPopup}>\n        <Grid container direction=\"column\">\n          <Grid item xs>\n            <Navbar />\n          </Grid>\n          <Grid item className={classes.body}>\n            <Switch>\n              <Route exact path=\"/\">\n                <Welcome />\n              </Route>\n              <Route exact path=\"/login\">\n                <Login />\n              </Route>\n              <Route exact path=\"/signup\">\n                <Signup />\n              </Route>\n              <Route exact path=\"/logout\">\n                <Logout />\n              </Route>\n              <Route exact path=\"/home\">\n                <Home />\n              </Route>\n              <Route exact path=\"/applications\">\n                <Applications />\n              </Route>\n              <Route exact path=\"/profile\">\n                {userType() === \"recruiter\" ? (\n                  <RecruiterProfile />\n                ) : (\n                  <Profile />\n                )}\n              </Route>\n              <Route exact path=\"/addjob\">\n                <CreateJobs />\n              </Route>\n              <Route exact path=\"/myjobs\">\n                <MyJobs />\n              </Route>\n              <Route exact path=\"/job/applications/:jobId\">\n                <JobApplications />\n              </Route>\n              <Route exact path=\"/employees\">\n                <AcceptedApplicants />\n              </Route>\n              <Route>\n                <ErrorPage />\n              </Route>\n            </Switch>\n          </Grid>\n        </Grid>\n        <MessagePopup\n          open={popup.open}\n          setOpen={(status) =>\n            setPopup({\n              ...popup,\n              open: status,\n            })\n          }\n          severity={popup.severity}\n          message={popup.message}\n        />\n      </SetPopupContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Navbar.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Login.js",["101"],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Welcome.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Signup.js",["102","103","104"],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Profile.js",["105","106","107"],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Applications.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Home.js",["108"],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\Logout.js",["109"],"import { useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../App\";\n\nconst Logout = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"type\");\n    setPopup({\n      open: true,\n      severity: \"success\",\n      message: \"Logged out successfully\",\n    });\n  }, []);\n  return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["110","111"],"import { useState, useEffect, useContext, useCallback, useMemo } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  Paper,\n  Typography,\n  Modal,\n  Avatar,\n  CircularProgress,\n  Tooltip,\n  Checkbox,\n  FormControlLabel,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport {\n  FilterList as FilterListIcon,\n  ArrowUpward as ArrowUpwardIcon,\n  ArrowDownward as ArrowDownwardIcon,\n  GetApp as DownloadIcon,\n  Star as StarIcon,\n  WorkOff as EndJobIcon,\n} from \"@material-ui/icons\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport { Fade, Zoom, Grow } from \"@material-ui/core\";\n\nimport { SetPopupContext } from \"../../App\";\nimport apiList, { server } from \"../../lib/apiList\";\n\n// Custom hook for fetching data\nconst useFetchApplications = (searchOptions, setPopup) => {\n  const [applications, setApplications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      let searchParams = [`status=accepted`];\n\n      Object.entries(searchOptions.sort).forEach(([key, value]) => {\n        if (value.status) {\n          searchParams.push(`${value.desc ? 'desc' : 'asc'}=${key}`);\n        }\n      });\n\n      const queryString = searchParams.join(\"&\");\n      const address = queryString \n        ? `${apiList.applicants}?${queryString}`\n        : apiList.applicants;\n\n      const response = await axios.get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n\n      setApplications(response.data);\n      setError(null);\n    } catch (err) {\n      console.error(\"Fetch error:\", err);\n      setError(err.response?.data?.message || \"Failed to fetch applications\");\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: err.response?.data?.message || \"Failed to fetch applications\",\n      });\n      setApplications([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [searchOptions, setPopup]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return { applications, loading, error, refetch: fetchData };\n};\n\n// Custom hook for resume download\nconst useResumeDownload = (setPopup) => {\n  return useCallback(async (resumePath) => {\n    if (!resumePath) {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n      return;\n    }\n\n    try {\n      const address = `${server}${resumePath}`;\n      const response = await axios.get(address, {\n        responseType: \"blob\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n\n      const file = new Blob([response.data], { type: \"application/pdf\" });\n      const fileURL = URL.createObjectURL(file);\n      const link = document.createElement('a');\n      link.href = fileURL;\n      link.setAttribute('download', 'resume.pdf');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      setTimeout(() => URL.revokeObjectURL(fileURL), 100);\n    } catch (error) {\n      console.error(\"Download error:\", error);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Failed to download resume\",\n      });\n    }\n  }, [setPopup]);\n};\n\n// Enhanced styles using makeStyles\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n    padding: theme.spacing(4),\n    background: \"linear-gradient(120deg, #2E3B55 0%, #163670 100%)\",\n    minHeight: \"95vh\",\n    width: \"100%\",\n    margin: \"0\",\n    overflow: \"hidden\",\n   },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n    margin: theme.spacing(1, 0),\n  },\n  jobTileOuter: {\n    padding: theme.spacing(4),\n    margin: theme.spacing(2, 0),\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    background: \"rgba(255, 255, 255, 0.9)\",\n    backdropFilter: \"blur(5px)\",\n    borderRadius: 16,\n    boxShadow: \"0 8px 32px rgba(31, 38, 135, 0.2)\",\n    border: \"1px solid rgba(255, 255, 255, 0.18)\",\n    transition: \"all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)\",\n    \"&:hover\": {\n      transform: \"translateY(-8px) scale(1.01)\",\n      boxShadow: \"0 15px 40px rgba(31, 38, 135, 0.3)\",\n      borderColor: \"#2E3B55\",\n    },\n  },\n  popupDialog: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: theme.spacing(4),\n  },\n  popupPaper: {\n    padding: theme.spacing(4),\n    borderRadius: 16,\n    outline: \"none\",\n    background: \"linear-gradient(145deg, #f5f7fa, #e4e7eb)\",\n    boxShadow: \"0 10px 25px rgba(0, 0, 0, 0.2)\",\n    border: \"1px solid rgba(255, 255, 255, 0.3)\",\n    minWidth: \"300px\",\n    textAlign: \"center\",\n    animation: \"$popIn 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards\",\n  },\n  \"@keyframes popIn\": {\n    \"0%\": {\n      opacity: 0,\n      transform: \"scale(0.9)\",\n    },\n    \"100%\": {\n      opacity: 1,\n      transform: \"scale(1)\",\n    },\n  },\n  avatar: {\n    width: theme.spacing(12),\n    height: theme.spacing(12),\n    margin: theme.spacing(0, \"auto\"),\n    border: \"4px solid #fff\",\n    boxShadow: \"0 4px 15px rgba(0, 0, 0, 0.15)\",\n    transition: \"transform 0.3s ease\",\n    \"&:hover\": {\n      transform: \"scale(1.1)\",\n    },\n  },\n  skillChip: {\n    margin: theme.spacing(0.5),\n    background: \"linear-gradient(135deg, #3949ab 0%, #1e3c72 100%)\",\n    color: \"#fff\",\n    fontWeight: 500,\n    boxShadow: \"0 2px 5px rgba(57, 73, 171, 0.3)\",\n    transition: \"all 0.3s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-2px)\",\n      boxShadow: \"0 4px 8px rgba(57, 73, 171, 0.5)\",\n    },\n  },\n  loadingContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"70vh\",\n    flexDirection: \"column\",\n  },\n  loadingText: {\n    color: \"#fff\",\n    marginTop: theme.spacing(2),\n    animation: \"$pulse 1.5s infinite\",\n  },\n  \"@keyframes pulse\": {\n    \"0%\": { opacity: 0.6 },\n    \"50%\": { opacity: 1 },\n    \"100%\": { opacity: 0.6 },\n  },\n  actionButton: {\n    margin: theme.spacing(1, 0),\n    width: \"100%\",\n    borderRadius: 30,\n    padding: \"10px 20px\",\n    fontWeight: 600,\n    textTransform: \"none\",\n    boxShadow: \"0 4px 15px rgba(0, 0, 0, 0.1)\",\n    transition: \"all 0.3s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-3px)\",\n      boxShadow: \"0 8px 20px rgba(0, 0, 0, 0.2)\",\n    },\n  },\n  downloadButton: {\n    background: \"linear-gradient(45deg, #00acc1 0%, #26c6da 100%)\",\n    color: \"#fff\",\n    \"&:hover\": {\n      background: \"linear-gradient(45deg, #26c6da 0%, #4dd0e1 100%)\",\n    },\n  },\n  endJobButton: {\n    background: \"linear-gradient(45deg, #f44336 0%, #ff5252 100%)\",\n    color: \"#fff\",\n    \"&:hover\": {\n      background: \"linear-gradient(45deg, #ff5252 0%, #ff8a80 100%)\",\n    },\n  },\n  rateButton: {\n    background: \"linear-gradient(45deg, #ff9800 0%, #ffb74d 100%)\",\n    color: \"#fff\",\n    \"&:hover\": {\n      background: \"linear-gradient(45deg, #ffb74d 0%, #ffd54f 100%)\",\n    },\n  },\n  filterButton: {\n    backgroundColor: \"#3949ab\",\n    color: \"#fff\",\n    borderRadius: \"50%\",\n    padding: theme.spacing(1.5),\n    boxShadow: \"0 4px 10px rgba(57, 73, 171, 0.3)\",\n    transition: \"all 0.3s ease\",\n    \"&:hover\": {\n      transform: \"rotate(180deg)\",\n      backgroundColor: \"#1e3c72\",\n      boxShadow: \"0 6px 15px rgba(57, 73, 171, 0.5)\",\n    },\n  },\n  sortOption: {\n    border: `1px solid rgba(255, 255, 255, 0.2)`,\n    borderRadius: theme.shape.borderRadius,\n    padding: theme.spacing(1.5),\n    margin: theme.spacing(1, 0),\n    background: \"rgba(255, 255, 255, 0.1)\",\n    backdropFilter: \"blur(5px)\",\n    transition: \"all 0.3s ease\",\n    \"&:hover\": {\n      background: \"rgba(255, 255, 255, 0.2)\",\n      boxShadow: \"0 4px 15px rgba(0, 0, 0, 0.1)\",\n    },\n  },\n  sectionTitle: {\n    marginBottom: theme.spacing(3),\n    fontWeight: 700,\n    color: \"#ffffff\",\n    position: \"relative\",\n    display: \"inline-block\",\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      bottom: -10,\n      left: 0,\n      width: \"40%\",\n      height: 4,\n      backgroundColor: \"#ff9800\",\n      borderRadius: 2,\n    },\n  },\n  applicantInfo: {\n    paddingLeft: theme.spacing(2),\n  },\n  applicantName: {\n    fontWeight: 700,\n    color: \"#1e3c72\",\n    marginBottom: theme.spacing(1),\n  },\n  infoLabel: {\n    fontWeight: 600,\n    color: \"#546e7a\",\n  },\n  infoValue: {\n    color: \"#37474f\",\n  },\n  paper: {\n    background: \"rgba(255, 255, 255, 0.9)\",\n    backdropFilter: \"blur(10px)\",\n    padding: theme.spacing(4),\n    borderRadius: 16,\n    boxShadow: \"0 8px 32px rgba(31, 38, 135, 0.2)\",\n    border: \"1px solid rgba(255, 255, 255, 0.18)\",\n  },\n  modalTitle: {\n    color: \"#1e3c72\",\n    fontWeight: 700,\n    marginBottom: theme.spacing(3),\n  },\n  modalButton: {\n    borderRadius: 30,\n    padding: \"10px 25px\",\n    margin: theme.spacing(1),\n    fontWeight: 600,\n    boxShadow: \"0 4px 15px rgba(0, 0, 0, 0.1)\",\n    transition: \"all 0.3s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-2px)\",\n      boxShadow: \"0 8px 20px rgba(0, 0, 0, 0.2)\",\n    },\n  },\n  rating: {\n    margin: theme.spacing(3, 0),\n    \"& .MuiRating-iconFilled\": {\n      color: \"#ff9800\",\n    },\n  },\n  noEmployeesText: {\n    color: \"rgba(255, 255, 255, 0.7)\",\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n    animation: \"$fadeIn 1s ease-in\",\n  },\n  \"@keyframes fadeIn\": {\n    from: { opacity: 0 },\n    to: { opacity: 1 },\n  },\n}));\n\n// FilterPopup Component (Enhanced)\nconst FilterPopup = ({ open, handleClose, searchOptions, setSearchOptions, onApply }) => {\n  const classes = useStyles();\n\n  const sortOptions = [\n    { key: \"jobApplicant.name\", label: \"Name\" },\n    { key: \"job.title\", label: \"Job Title\" },\n    { key: \"dateOfJoining\", label: \"Date of Joining\" },\n    { key: \"jobApplicant.rating\", label: \"Rating\" },\n  ];\n\n  const toggleSortOption = (key) => {\n    setSearchOptions(prev => ({\n      ...prev,\n      sort: {\n        ...prev.sort,\n        [key]: {\n          ...prev.sort[key],\n          status: !prev.sort[key].status,\n        },\n      },\n    }));\n  };\n\n  const toggleSortDirection = (key) => {\n    setSearchOptions(prev => ({\n      ...prev,\n      sort: {\n        ...prev.sort,\n        [key]: {\n          ...prev.sort[key],\n          desc: !prev.sort[key].desc,\n        },\n      },\n    }));\n  };\n\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Fade in={open}>\n        <Paper className={classes.paper} elevation={3} style={{ minWidth: \"50%\" }}>\n          <Typography variant=\"h5\" className={classes.modalTitle}>Filter and Sort Options</Typography>\n          \n          <Grid container spacing={3} direction=\"column\">\n            <Grid item>\n              <Typography variant=\"subtitle1\" style={{ color: \"#546e7a\", fontWeight: 600 }}>Sort By:</Typography>\n              <Grid container spacing={2}>\n                {sortOptions.map((option) => (\n                  <Grid item xs={12} sm={6} key={option.key}>\n                    <Grow in={true} timeout={(sortOptions.indexOf(option) + 1) * 200}>\n                      <Paper className={classes.sortOption}>\n                        <Grid container alignItems=\"center\" justify=\"space-between\">\n                          <Grid item>\n                            <FormControlLabel\n                              control={\n                                <Checkbox\n                                  checked={searchOptions.sort[option.key].status}\n                                  onChange={() => toggleSortOption(option.key)}\n                                  color=\"primary\"\n                                />\n                              }\n                              label={option.label}\n                            />\n                          </Grid>\n                          <Grid item>\n                            <Tooltip title=\"Toggle sort direction\">\n                              <IconButton\n                                disabled={!searchOptions.sort[option.key].status}\n                                onClick={() => toggleSortDirection(option.key)}\n                                size=\"small\"\n                              >\n                                {searchOptions.sort[option.key].desc ? (\n                                  <ArrowDownwardIcon fontSize=\"small\" />\n                                ) : (\n                                  <ArrowUpwardIcon fontSize=\"small\" />\n                                )}\n                              </IconButton>\n                            </Tooltip>\n                          </Grid>\n                        </Grid>\n                      </Paper>\n                    </Grow>\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n\n            <Grid item container justify=\"center\">\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                className={classes.modalButton}\n                onClick={() => {\n                  onApply();\n                  handleClose();\n                }}\n              >\n                Apply Filters\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Fade>\n    </Modal>\n  );\n};\n\n// ApplicationTile Component (Enhanced)\nconst ApplicationTile = ({ application, getData, index }) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [ratingModalOpen, setRatingModalOpen] = useState(false);\n  const [endJobModalOpen, setEndJobModalOpen] = useState(false);\n  const [rating, setRating] = useState(application.jobApplicant.rating);\n  const downloadResume = useResumeDownload(setPopup);\n\n  const appliedOn = new Date(application.dateOfApplication);\n  const formattedDate = appliedOn.toLocaleDateString(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n\n  const updateRating = async () => {\n    try {\n      await axios.put(\n        apiList.rating,\n        { rating: rating, applicantId: application.jobApplicant.userId },\n        { headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` } }\n      );\n      \n      setPopup({\n        open: true,\n        severity: \"success\",\n        message: \"Rating updated successfully\",\n      });\n      getData();\n      setRatingModalOpen(false);\n    } catch (err) {\n      console.error(\"Rating error:\", err);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: err.response?.data?.message || \"Failed to update rating\",\n      });\n    }\n  };\n\n  const endJob = async () => {\n    try {\n      await axios.put(\n        `${apiList.applications}/${application._id}`,\n        { status: \"finished\", dateOfJoining: new Date().toISOString() },\n        { headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` } }\n      );\n      \n      setPopup({\n        open: true,\n        severity: \"success\",\n        message: \"Job ended successfully\",\n      });\n      getData();\n      setEndJobModalOpen(false);\n    } catch (err) {\n      console.error(\"End job error:\", err);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: err.response?.data?.message || \"Failed to end job\",\n      });\n    }\n  };\n\n  const hasRating = application.jobApplicant.rating !== -1;\n\n  return (\n    <Grow in={true} timeout={(index + 1) * 300}>\n      <Paper className={classes.jobTileOuter} elevation={3}>\n        <Grid container spacing={3} alignItems=\"center\">\n          {/* Applicant Avatar */}\n          <Grid item xs={12} sm={2}>\n            <Avatar\n              src={`${server}${application.jobApplicant.profile}`}\n              className={classes.avatar}\n              alt={application.jobApplicant.name}\n            />\n          </Grid>\n\n          {/* Applicant Information */}\n          <Grid item xs={12} sm={7} className={classes.applicantInfo}>\n            <Typography variant=\"h5\" className={classes.applicantName}>\n              {application.jobApplicant.name}\n            </Typography>\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Rating\n                  value={hasRating ? application.jobApplicant.rating : null}\n                  readOnly\n                  precision={0.5}\n                  className={classes.rating}\n                  emptyIcon={<StarIcon fontSize=\"inherit\" style={{ opacity: 0.5 }} />}\n                />\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <Typography>\n                  <span className={classes.infoLabel}>Job Title:</span>{\" \"}\n                  <span className={classes.infoValue}>{application.job.title}</span>\n                </Typography>\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <Typography>\n                  <span className={classes.infoLabel}>Role:</span>{\" \"}\n                  <span className={classes.infoValue}>{application.job.jobType}</span>\n                </Typography>\n              </Grid>\n              \n              <Grid item xs={12} sm={6}>\n                <Typography>\n                  <span className={classes.infoLabel}>Applied On:</span>{\" \"}\n                  <span className={classes.infoValue}>{formattedDate}</span>\n                </Typography>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Typography>\n                  <span className={classes.infoLabel}>SOP:</span>{\" \"}\n                  <span className={classes.infoValue}>{application.sop || \"Not Submitted\"}</span>\n                </Typography>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Typography gutterBottom className={classes.infoLabel}>Skills:</Typography>\n                <div>\n                  {application.jobApplicant.skills.map((skill, index) => (\n                    <Chip\n                      key={index}\n                      label={skill}\n                      className={classes.skillChip}\n                    />\n                  ))}\n                </div>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          {/* Action Buttons */}\n          <Grid item xs={12} sm={3}>\n            <Button\n              variant=\"contained\"\n              className={`${classes.actionButton} ${classes.downloadButton}`}\n              startIcon={<DownloadIcon />}\n              onClick={() => downloadResume(application.jobApplicant.resume)}\n              fullWidth\n            >\n              Download Resume\n            </Button>\n            \n            <Button\n              variant=\"contained\"\n              className={`${classes.actionButton} ${classes.endJobButton}`}\n              startIcon={<EndJobIcon />}\n              onClick={() => setEndJobModalOpen(true)}\n              fullWidth\n            >\n              End Job\n            </Button>\n            \n            <Button\n              variant=\"contained\"\n              className={`${classes.actionButton} ${classes.rateButton}`}\n              startIcon={<StarIcon />}\n              onClick={() => setRatingModalOpen(true)}\n              fullWidth\n            >\n              Rate Applicant\n            </Button>\n          </Grid>\n        </Grid>\n\n        {/* Rating Modal */}\n        <Modal open={ratingModalOpen} onClose={() => setRatingModalOpen(false)} className={classes.popupDialog}>\n          <Paper className={classes.popupPaper}>\n            <Typography variant=\"h6\" className={classes.modalTitle}>Rate Applicant</Typography>\n            <Rating\n              name=\"applicant-rating\"\n              value={rating}\n              onChange={(_, newValue) => setRating(newValue)}\n              precision={0.5}\n              size=\"large\"\n              className={classes.rating}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={updateRating}\n              className={classes.modalButton}\n              fullWidth\n            >\n              Submit Rating\n            </Button>\n          </Paper>\n        </Modal>\n\n        {/* End Job Confirmation Modal */}\n        <Modal open={endJobModalOpen} onClose={() => setEndJobModalOpen(false)} className={classes.popupDialog}>\n          <Paper className={classes.popupPaper}>\n            <Typography variant=\"h6\" className={classes.modalTitle}>Confirm Job Termination</Typography>\n            <Typography paragraph style={{ color: \"#546e7a\" }}>\n              Are you sure you want to end this employment?\n            </Typography>\n            <Grid container spacing={2} justify=\"center\">\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={endJob}\n                  className={classes.modalButton}\n                >\n                  Confirm\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setEndJobModalOpen(false)}\n                  className={classes.modalButton}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Modal>\n      </Paper>\n    </Grow>\n  );\n};\n\n// Main Component (Enhanced)\nconst AcceptedApplicants = () => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    sort: {\n      \"jobApplicant.name\": { status: false, desc: false },\n      \"job.title\": { status: false, desc: false },\n      \"dateOfJoining\": { status: true, desc: true },\n      \"jobApplicant.rating\": { status: false, desc: false },\n    },\n  });\n\n  const { applications, loading, error, refetch } = useFetchApplications(searchOptions, setPopup);\n\n  const handleApplyFilters = useCallback(() => {\n    refetch();\n  }, [refetch]);\n\n  const memoizedApplications = useMemo(() => applications, [applications]);\n\n  if (loading) {\n    return (\n      <div className={classes.loadingContainer}>\n        <CircularProgress size={60} style={{ color: \"#fff\" }} />\n        <Typography variant=\"h6\" className={classes.loadingText}>\n          Loading employees...\n        </Typography>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.body}>\n      <Grid container direction=\"column\" spacing={3}>\n        <Grid item container justify=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            <Typography variant=\"h3\" className={classes.sectionTitle}>\n              Current Employees\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Tooltip title=\"Filter and sort options\">\n              <IconButton \n                onClick={() => setFilterOpen(true)}\n                className={classes.filterButton}\n              >\n                <FilterListIcon fontSize=\"large\" />\n              </IconButton>\n            </Tooltip>\n          </Grid>\n        </Grid>\n\n        <Grid item>\n          {error ? (\n            <Typography color=\"error\" align=\"center\" style={{ color: \"#ff5252\", background: \"rgba(255,255,255,0.8)\", padding: \"20px\", borderRadius: \"10px\" }}>\n              {error}\n            </Typography>\n          ) : memoizedApplications.length > 0 ? (\n            memoizedApplications.map((application, index) => (\n              <ApplicationTile \n                key={application._id} \n                application={application} \n                getData={refetch}\n                index={index}\n              />\n            ))\n          ) : (\n            <Typography variant=\"h5\" className={classes.noEmployeesText}>\n              No current employees found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n\n      <FilterPopup\n        open={filterOpen}\n        handleClose={() => setFilterOpen(false)}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        onApply={handleApplyFilters}\n      />\n    </div>\n  );\n};\n\nexport default AcceptedApplicants;","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\MyJobs.js",["112"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { SetPopupContext } from \"../../App\";\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n    background: \"linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)\",\n    minHeight: \"93vh\",\n    width: \"100%\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n    transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-3px)\",\n      boxShadow: \"0 10px 20px rgba(0,0,0,0.2)\",\n    },\n  },\n  jobTileOuter: {\n    padding: \"25px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    borderRadius: \"12px\",\n    background: \"#fff\",\n    boxShadow: \"0 6px 15px rgba(0,0,0,0.1)\",\n    transition: \"transform 0.4s ease, box-shadow 0.4s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-5px)\",\n      boxShadow: \"0 12px 20px rgba(0,0,0,0.15)\",\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backdropFilter: \"blur(5px)\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n    borderRadius: \"8px\",\n    fontWeight: \"bold\",\n    transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-2px)\",\n      boxShadow: \"0 5px 10px rgba(0,0,0,0.1)\",\n    },\n  },\n  searchBar: {\n    width: \"500px\",\n    marginBottom: \"20px\",\n    \"& .MuiOutlinedInput-root\": {\n      borderRadius: \"30px\",\n      backgroundColor: \"rgba(255, 255, 255, 0.9)\",\n      transition: \"transform 0.3s ease\",\n      \"&:hover\": {\n        transform: \"scale(1.02)\",\n      },\n    },\n  },\n  filterButton: {\n    backgroundColor: \"#3f51b5\",\n    color: \"white\",\n    borderRadius: \"50%\",\n    padding: \"12px\",\n    boxShadow: \"0 4px 8px rgba(0,0,0,0.2)\",\n    transition: \"transform 0.3s ease\",\n    \"&:hover\": {\n      transform: \"rotate(90deg)\",\n      backgroundColor: \"#303f9f\",\n    },\n  },\n  modalPaper: {\n    padding: \"40px\",\n    outline: \"none\",\n    borderRadius: \"15px\",\n    backgroundColor: \"#fff\",\n    boxShadow: \"0 10px 30px rgba(0,0,0,0.2)\",\n    minWidth: \"50%\",\n  },\n  applyButton: {\n    padding: \"12px 40px\",\n    borderRadius: \"30px\",\n    background: \"linear-gradient(135deg, #4a00e0 0%, #8e2de2 100%)\",\n    color: \"white\",\n    boxShadow: \"0 4px 10px rgba(74, 0, 224, 0.3)\",\n    transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-3px)\",\n      boxShadow: \"0 6px 15px rgba(74, 0, 224, 0.4)\",\n    },\n  },\n  chip: {\n    margin: \"0 4px 4px 0\",\n    background: \"linear-gradient(135deg, #8e2de2 0%, #4a00e0 100%)\",\n    color: \"white\",\n    fontWeight: \"500\",\n    transition: \"transform 0.3s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-2px)\",\n    },\n  },\n  pageTitle: {\n    color: \"white\",\n    textShadow: \"0 2px 4px rgba(0,0,0,0.3)\",\n    marginBottom: \"20px\",\n    fontWeight: \"600\",\n  },\n  sliderRoot: {\n    color: \"#8e2de2\",\n  },\n  actionButton: {\n    transition: \"transform 0.3s ease\",\n    borderRadius: \"8px\",\n    \"&:hover\": {\n      transform: \"scale(1.05)\",\n    },\n  },\n  viewApplicationsBtn: {\n    background: \"linear-gradient(135deg, #2193b0 0%, #6dd5ed 100%)\",\n    color: \"white\",\n  },\n  updateBtn: {\n    background: \"linear-gradient(135deg, #FF8008 0%, #FFC837 100%)\",\n    color: \"white\",\n  },\n  deleteBtn: {\n    background: \"linear-gradient(135deg, #cb2d3e 0%, #ef473a 100%)\",\n    color: \"white\",\n  },\n  sortContainer: {\n    border: \"1px solid #D1D1D1\", \n    borderRadius: \"10px\",\n    padding: \"8px\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n    transition: \"box-shadow 0.3s ease\",\n    \"&:hover\": {\n      boxShadow: \"0 4px 8px rgba(0,0,0,0.1)\",\n    },\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    history.push(location);\n  };\n\n  const handleClose = () => setOpen(false);\n  const handleCloseUpdate = () => setOpenUpdate(false);\n\n  const handleDelete = () => {\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\" style={{ fontWeight: \"600\", color: \"#1e3c72\" }}>\n              {job.title}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating \n              value={job.rating !== -1 ? job.rating : null} \n              readOnly \n              style={{ color: \"#FFC837\" }}\n            />\n          </Grid>\n          <Grid item><b>Role:</b> {job.jobType}</Grid>\n          <Grid item><b>Salary:</b> ₹{job.salary} per month</Grid>\n          <Grid item>\n            <b>Duration:</b> {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item><b>Posted:</b> {postedOn.toLocaleDateString()}</Grid>\n          <Grid item><b>Applicants:</b> {job.maxApplicants}</Grid>\n          <Grid item>\n            <b>Open Positions:</b> {job.maxPositions - job.acceptedCandidates}\n          </Grid>\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} className={classes.chip} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3} spacing={2}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={`${classes.statusBlock} ${classes.viewApplicationsBtn} ${classes.actionButton}`}\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\n            >\n              View Applications\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={`${classes.statusBlock} ${classes.updateBtn} ${classes.actionButton}`}\n              onClick={() => setOpenUpdate(true)}\n            >\n              Update Details\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={`${classes.statusBlock} ${classes.deleteBtn} ${classes.actionButton}`}\n              onClick={() => setOpen(true)}\n            >\n              Delete Job\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      \n      {/* Delete Modal */}\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper className={classes.modalPaper}>\n          <Typography variant=\"h4\" style={{ marginBottom: \"20px\", textAlign: \"center\", color: \"#1e3c72\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                className={classes.deleteBtn}\n                style={{ padding: \"10px 50px\" }}\n                onClick={handleDelete}\n              >\n                Delete\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={handleClose}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n      \n      {/* Update Modal */}\n      <Modal\n        open={openUpdate}\n        onClose={handleCloseUpdate}\n        className={classes.popupDialog}\n      >\n        <Paper className={classes.modalPaper}>\n          <Typography variant=\"h4\" style={{ marginBottom: \"20px\", textAlign: \"center\", color: \"#1e3c72\" }}>\n            Update Details\n          </Typography>\n          <Grid\n            container\n            direction=\"column\"\n            spacing={3}\n          >\n            <Grid item>\n              <TextField\n                label=\"Application Deadline\"\n                type=\"datetime-local\"\n                value={jobDetails.deadline.substr(0, 16)}\n                onChange={(event) => handleInput(\"deadline\", event.target.value)}\n                InputLabelProps={{ shrink: true }}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Maximum Number Of Applicants\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxApplicants}\n                onChange={(event) => handleInput(\"maxApplicants\", event.target.value)}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Positions Available\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxPositions}\n                onChange={(event) => handleInput(\"maxPositions\", event.target.value)}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\" spacing={5} style={{ marginTop: \"20px\" }}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                className={classes.updateBtn}\n                style={{ padding: \"10px 50px\" }}\n                onClick={handleJobUpdate}\n              >\n                Update\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={handleCloseUpdate}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  \n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper className={classes.modalPaper}>\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          {/* Job Type Selection */}\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              <Typography variant=\"subtitle1\" style={{ fontWeight: \"600\" }}>Job Type</Typography>\n            </Grid>\n            <Grid container item xs={9} justify=\"space-around\">\n              {[\"fullTime\", \"partTime\", \"wfh\"].map((type, index) => (\n                <Grid item key={index}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        name={type}\n                        checked={searchOptions.jobType[type]}\n                        onChange={(event) => {\n                          setSearchOptions({\n                            ...searchOptions,\n                            jobType: {\n                              ...searchOptions.jobType,\n                              [event.target.name]: event.target.checked,\n                            },\n                          });\n                        }}\n                        style={{ color: \"#4a00e0\" }}\n                      />\n                    }\n                    label={type === \"fullTime\" ? \"Full Time\" : type === \"partTime\" ? \"Part Time\" : \"Work From Home\"}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n\n          {/* Salary Slider */}\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              <Typography variant=\"subtitle1\" style={{ fontWeight: \"600\" }}>Salary</Typography>\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                classes={{ root: classes.sliderRoot }}\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => `₹${value * 1000}`}\n                marks={[\n                  { value: 0, label: \"₹0\" },\n                  { value: 100, label: \"₹100,000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n\n          {/* Duration Selection */}\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              <Typography variant=\"subtitle1\" style={{ fontWeight: \"600\" }}>Duration</Typography>\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                {[0, 1, 2, 3, 4, 5, 6, 7].map((item) => (\n                  <MenuItem key={item} value={item.toString()}>\n                    {item === 0 ? \"All\" : `${item} month${item > 1 ? \"s\" : \"\"}`}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n          </Grid>\n\n          {/* Sort Options */}\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              <Typography variant=\"subtitle1\" style={{ fontWeight: \"600\" }}>Sort By</Typography>\n            </Grid>\n            <Grid item container direction=\"row\" xs={9} spacing={1}>\n              {[\"salary\", \"duration\", \"rating\"].map((sortType, index) => (\n                <Grid item container xs={4} key={index} className={classes.sortContainer}>\n                  <Grid item>\n                    <Checkbox\n                      name={sortType}\n                      checked={searchOptions.sort[sortType].status}\n                      onChange={(event) =>\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            [sortType]: {\n                              ...searchOptions.sort[sortType],\n                              status: event.target.checked,\n                            },\n                          },\n                        })\n                      }\n                      id={sortType}\n                      style={{ color: \"#4a00e0\" }}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <label htmlFor={sortType}>\n                      <Typography style={{ textTransform: \"capitalize\" }}>{sortType}</Typography>\n                    </label>\n                  </Grid>\n                  <Grid item>\n                    <IconButton\n                      disabled={!searchOptions.sort[sortType].status}\n                      onClick={() => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            [sortType]: {\n                              ...searchOptions.sort[sortType],\n                              desc: !searchOptions.sort[sortType].desc,\n                            },\n                          },\n                        });\n                      }}\n                    >\n                      {searchOptions.sort[sortType].desc ? (\n                        <ArrowDownwardIcon />\n                      ) : (\n                        <ArrowUpwardIcon />\n                      )}\n                    </IconButton>\n                  </Grid>\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n\n          {/* Apply Button */}\n          <Grid item style={{ marginTop: \"10px\" }}>\n            <Button\n              variant=\"contained\"\n              className={classes.applyButton}\n              onClick={() => getData()}\n            >\n              Apply Filters\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = () => {\n  const classes = useStyles();\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  \n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [`myjobs=1`];\n    \n    if (searchOptions.query !== \"\") {\n      searchParams.push(`q=${searchOptions.query}`);\n    }\n    \n    Object.keys(searchOptions.jobType).forEach(type => {\n      if (searchOptions.jobType[type]) {\n        const formattedType = type === \"fullTime\" ? \"Full%20Time\" : \n                             type === \"partTime\" ? \"Part%20Time\" : \"Work%20From%20Home\";\n        searchParams.push(`jobType=${formattedType}`);\n      }\n    });\n    \n    if (searchOptions.salary[0] !== 0) {\n      searchParams.push(`salaryMin=${searchOptions.salary[0] * 1000}`);\n    }\n    \n    if (searchOptions.salary[1] !== 100) {\n      searchParams.push(`salaryMax=${searchOptions.salary[1] * 1000}`);\n    }\n    \n    if (searchOptions.duration !== \"0\") {\n      searchParams.push(`duration=${searchOptions.duration}`);\n    }\n\n    // Add sorting parameters\n    let asc = [], desc = [];\n    Object.keys(searchOptions.sort).forEach((key) => {\n      const item = searchOptions.sort[key];\n      if (item.status) {\n        (item.desc ? desc : asc).push(`${item.desc ? 'desc' : 'asc'}=${key}`);\n      }\n    });\n    \n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    \n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response?.data?.message || \"Error fetching jobs\",\n        });\n      });\n  };\n\n  return (\n    <div className={classes.body}>\n      <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\" }}\n      >\n        {/* Header and Search */}\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Typography variant=\"h2\" className={classes.pageTitle}>\n              My Jobs\n            </Typography>\n          </Grid>\n          <Grid item style={{ marginBottom: \"20px\" }}>\n            <TextField\n              className={classes.searchBar}\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              variant=\"outlined\"\n            />\n            <IconButton \n              className={classes.filterButton} \n              onClick={() => setFilterOpen(true)}\n            >\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        {/* Job Listings */}\n        <Grid\n          container\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => (\n              <JobTile key={job._id} job={job} getData={getData} />\n            ))\n          ) : (\n            <Paper className={classes.jobTileOuter}>\n              <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n                No jobs found\n              </Typography>\n            </Paper>\n          )}\n        </Grid>\n      </Grid>\n      \n      {/* Filter Popup */}\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default MyJobs;","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\JobApplications.js",["113","114"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  FormControlLabel,\n  Checkbox,\n  Avatar,\n  Zoom,\n  Fade,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\nimport apiList, { server } from \"../../lib/apiList\";\n\n// Enhanced color palette\nconst coolColors = {\n  primary: \"#4776E6\",\n  secondary: \"#8E54E9\",\n  accent: \"#FF6B6B\",\n  dark: \"#1e3c72\",\n  light: \"#f8f9fa\",\n  success: \"#38ef7d\",\n  warning: \"#FFD166\",\n  danger: \"#F25F5C\",\n  info: \"#00F5FF\",\n  neutral: \"#525252\",\n};\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n    background: `linear-gradient(120deg, #1e3c72 0%, #2a5298 100%)`,\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n    borderRadius: \"8px\",\n    fontWeight: \"bold\",\n    transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n    \"&:hover\": {\n      transform: \"translateY(-3px)\",\n      boxShadow: \"0 8px 15px rgba(0,0,0,0.2)\",\n    },\n  },\n  jobTileOuter: {\n    padding: \"25px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    borderRadius: \"12px\",\n    boxShadow: \"0 8px 16px rgba(71, 118, 230, 0.15)\",\n    transition: \"transform 0.4s ease, box-shadow 0.4s ease\",\n    background: coolColors.light,\n    \"&:hover\": {\n      transform: \"translateY(-5px)\",\n      boxShadow: \"0 15px 30px rgba(71, 118, 230, 0.25)\",\n    },\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backdropFilter: \"blur(5px)\",\n  },\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n    border: `4px solid ${coolColors.primary}`,\n    boxShadow: \"0 4px 10px rgba(0,0,0,0.15)\",\n    transition: \"transform 0.3s ease\",\n    \"&:hover\": {\n      transform: \"scale(1.05)\",\n    },\n  },\n  filterButton: {\n    backgroundColor: coolColors.primary,\n    color: coolColors.light,\n    borderRadius: \"50%\",\n    padding: \"12px\",\n    boxShadow: \"0 4px 10px rgba(71, 118, 230, 0.3)\",\n    transition: \"all 0.3s ease\",\n    \"&:hover\": {\n      backgroundColor: coolColors.dark,\n      transform: \"rotate(180deg)\",\n    },\n  },\n  chip: {\n    margin: \"4px\",\n    background: `linear-gradient(45deg, ${coolColors.primary} 30%, ${coolColors.secondary} 90%)`,\n    color: coolColors.light,\n    fontWeight: \"500\",\n    transition: \"transform 0.3s ease\",\n    \"&:hover\": {\n      transform: \"scale(1.05)\",\n    },\n  },\n  modalPaper: {\n    padding: \"40px\",\n    outline: \"none\",\n    minWidth: \"50%\",\n    borderRadius: \"15px\",\n    backgroundColor: coolColors.light,\n    boxShadow: \"0 15px 30px rgba(0,0,0,0.1)\",\n  },\n  applyButton: {\n    padding: \"12px 50px\",\n    borderRadius: \"30px\",\n    background: `linear-gradient(45deg, ${coolColors.primary} 30%, ${coolColors.secondary} 90%)`,\n    color: coolColors.light,\n    transition: \"all 0.3s ease\",\n    \"&:hover\": {\n      transform: \"scale(1.05)\",\n      boxShadow: \"0 10px 20px rgba(0,0,0,0.1)\",\n    },\n  },\n  pageTitle: {\n    color: coolColors.light,\n    fontWeight: \"700\",\n    marginBottom: \"30px\",\n    textShadow: \"2px 2px 4px rgba(0,0,0,0.2)\",\n  },\n  applicationCount: {\n    backgroundColor: coolColors.secondary,\n    color: coolColors.light,\n    padding: \"4px 12px\",\n    borderRadius: \"20px\",\n    fontSize: \"0.9rem\",\n    fontWeight: \"bold\",\n    marginLeft: \"15px\",\n  },\n  checkboxLabel: {\n    color: coolColors.dark,\n    fontWeight: \"500\",\n  },\n  filterContainer: {\n    border: `1px solid ${coolColors.secondary}`,\n    borderRadius: \"8px\",\n    padding: \"8px\",\n    transition: \"box-shadow 0.3s ease\",\n    \"&:hover\": {\n      boxShadow: `0 4px 8px rgba(71, 118, 230, 0.2)`,\n    },\n  },\n  downloadButton: {\n    backgroundColor: coolColors.dark,\n    color: coolColors.light,\n    transition: \"background-color 0.3s ease\",\n    \"&:hover\": {\n      backgroundColor: coolColors.primary,\n    },\n  },\n  noApplications: {\n    color: coolColors.light,\n    textAlign: \"center\",\n    marginTop: \"50px\",\n    fontWeight: \"500\",\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  \n  return (\n    <Modal \n      open={open} \n      onClose={handleClose} \n      className={classes.popupDialog}\n      closeAfterTransition\n    >\n      <Fade in={open}>\n        <Paper className={classes.modalPaper}>\n          <Typography variant=\"h4\" gutterBottom style={{ color: coolColors.primary, fontWeight: \"bold\", textAlign: \"center\" }}>\n            Filter Applications\n          </Typography>\n          \n          <Grid container direction=\"column\" alignItems=\"center\" spacing={4}>\n            <Grid container item alignItems=\"center\">\n              <Grid item xs={3}>\n                <Typography variant=\"h6\" className={classes.checkboxLabel}>\n                  Application Status\n                </Typography>\n              </Grid>\n              <Grid container item xs={9} justify=\"space-around\">\n                <Grid item>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        name=\"rejected\"\n                        checked={searchOptions.status.rejected}\n                        onChange={(event) => {\n                          setSearchOptions({\n                            ...searchOptions,\n                            status: {\n                              ...searchOptions.status,\n                              [event.target.name]: event.target.checked,\n                            },\n                          });\n                        }}\n                        style={{ color: coolColors.danger }}\n                      />\n                    }\n                    label=\"Rejected\"\n                    className={classes.checkboxLabel}\n                  />\n                </Grid>\n                <Grid item>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        name=\"applied\"\n                        checked={searchOptions.status.applied}\n                        onChange={(event) => {\n                          setSearchOptions({\n                            ...searchOptions,\n                            status: {\n                              ...searchOptions.status,\n                              [event.target.name]: event.target.checked,\n                            },\n                          });\n                        }}\n                        style={{ color: coolColors.info }}\n                      />\n                    }\n                    label=\"Applied\"\n                    className={classes.checkboxLabel}\n                  />\n                </Grid>\n                <Grid item>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        name=\"shortlisted\"\n                        checked={searchOptions.status.shortlisted}\n                        onChange={(event) => {\n                          setSearchOptions({\n                            ...searchOptions,\n                            status: {\n                              ...searchOptions.status,\n                              [event.target.name]: event.target.checked,\n                            },\n                          });\n                        }}\n                        style={{ color: coolColors.warning }}\n                      />\n                    }\n                    label=\"Shortlisted\"\n                    className={classes.checkboxLabel}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            \n            <Grid container item alignItems=\"center\">\n              <Grid item xs={3}>\n                <Typography variant=\"h6\" className={classes.checkboxLabel}>\n                  Sort By\n                </Typography>\n              </Grid>\n              <Grid item container direction=\"row\" xs={9} spacing={2}>\n                <Grid\n                  item\n                  container\n                  xs={4}\n                  justify=\"space-around\"\n                  alignItems=\"center\"\n                  className={classes.filterContainer}\n                >\n                  <Grid item>\n                    <Checkbox\n                      name=\"name\"\n                      checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                      onChange={(event) =>\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            \"jobApplicant.name\": {\n                              ...searchOptions.sort[\"jobApplicant.name\"],\n                              status: event.target.checked,\n                            },\n                          },\n                        })\n                      }\n                      id=\"name\"\n                      style={{ color: coolColors.primary }}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <label htmlFor=\"name\">\n                      <Typography className={classes.checkboxLabel}>Name</Typography>\n                    </label>\n                  </Grid>\n                  <Grid item>\n                    <IconButton\n                      disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                      onClick={() => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            \"jobApplicant.name\": {\n                              ...searchOptions.sort[\"jobApplicant.name\"],\n                              desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                            },\n                          },\n                        });\n                      }}\n                      style={{ \n                        color: searchOptions.sort[\"jobApplicant.name\"].status ? coolColors.primary : coolColors.neutral\n                      }}\n                    >\n                      {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                        <ArrowDownwardIcon />\n                      ) : (\n                        <ArrowUpwardIcon />\n                      )}\n                    </IconButton>\n                  </Grid>\n                </Grid>\n                \n                <Grid\n                  item\n                  container\n                  xs={4}\n                  justify=\"space-around\"\n                  alignItems=\"center\"\n                  className={classes.filterContainer}\n                >\n                  <Grid item>\n                    <Checkbox\n                      name=\"dateOfApplication\"\n                      checked={searchOptions.sort.dateOfApplication.status}\n                      onChange={(event) =>\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            dateOfApplication: {\n                              ...searchOptions.sort.dateOfApplication,\n                              status: event.target.checked,\n                            },\n                          },\n                        })\n                      }\n                      id=\"dateOfApplication\"\n                      style={{ color: coolColors.primary }}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <label htmlFor=\"dateOfApplication\">\n                      <Typography className={classes.checkboxLabel}>Date</Typography>\n                    </label>\n                  </Grid>\n                  <Grid item>\n                    <IconButton\n                      disabled={!searchOptions.sort.dateOfApplication.status}\n                      onClick={() => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            dateOfApplication: {\n                              ...searchOptions.sort.dateOfApplication,\n                              desc: !searchOptions.sort.dateOfApplication.desc,\n                            },\n                          },\n                        });\n                      }}\n                      style={{ \n                        color: searchOptions.sort.dateOfApplication.status ? coolColors.primary : coolColors.neutral\n                      }}\n                    >\n                      {searchOptions.sort.dateOfApplication.desc ? (\n                        <ArrowDownwardIcon />\n                      ) : (\n                        <ArrowUpwardIcon />\n                      )}\n                    </IconButton>\n                  </Grid>\n                </Grid>\n                \n                <Grid\n                  item\n                  container\n                  xs={4}\n                  justify=\"space-around\"\n                  alignItems=\"center\"\n                  className={classes.filterContainer}\n                >\n                  <Grid item>\n                    <Checkbox\n                      name=\"rating\"\n                      checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                      onChange={(event) =>\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            \"jobApplicant.rating\": {\n                              ...searchOptions.sort[\"jobApplicant.rating\"],\n                              status: event.target.checked,\n                            },\n                          },\n                        })\n                      }\n                      id=\"rating\"\n                      style={{ color: coolColors.primary }}\n                    />\n                  </Grid>\n                  <Grid item>\n                    <label htmlFor=\"rating\">\n                      <Typography className={classes.checkboxLabel}>Rating</Typography>\n                    </label>\n                  </Grid>\n                  <Grid item>\n                    <IconButton\n                      disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                      onClick={() => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          sort: {\n                            ...searchOptions.sort,\n                            \"jobApplicant.rating\": {\n                              ...searchOptions.sort[\"jobApplicant.rating\"],\n                              desc: !searchOptions.sort[\"jobApplicant.rating\"].desc,\n                            },\n                          },\n                        });\n                      }}\n                      style={{ \n                        color: searchOptions.sort[\"jobApplicant.rating\"].status ? coolColors.primary : coolColors.neutral\n                      }}\n                    >\n                      {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                        <ArrowDownwardIcon />\n                      ) : (\n                        <ArrowUpwardIcon />\n                      )}\n                    </IconButton>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                className={classes.applyButton}\n                onClick={() => getData()}\n              >\n                Apply Filters\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Fade>\n    </Modal>\n  );\n};\n\n// Enhanced color mappings\nconst statusColors = {\n  applied: coolColors.info,\n  shortlisted: coolColors.warning,\n  accepted: coolColors.success,\n  rejected: coolColors.danger,\n  deleted: coolColors.neutral,\n  cancelled: coolColors.accent,\n  finished: coolColors.secondary,\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const getResume = () => {\n    if (application.jobApplicant.resume && application.jobApplicant.resume !== \"\") {\n      const address = `${server}${application.jobApplicant.resume}`;\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], { type: \"application/pdf\" });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Error downloading resume\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  };\n\n  const buttonSet = {\n    applied: (\n      <>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"shortlisted\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"shortlisted\")}\n          >\n            Shortlist\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    shortlisted: (\n      <>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"accepted\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"accepted\")}\n          >\n            Accept\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    rejected: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Rejected\n          </Paper>\n        </Grid>\n      </>\n    ),\n    accepted: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"accepted\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Accepted\n          </Paper>\n        </Grid>\n      </>\n    ),\n    cancelled: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"cancelled\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Cancelled\n          </Paper>\n        </Grid>\n      </>\n    ),\n    finished: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: statusColors[\"finished\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Finished\n          </Paper>\n        </Grid>\n      </>\n    ),\n  };\n\n  return (\n    <Zoom in={true} style={{ transitionDelay: '100ms' }}>\n      <Paper className={classes.jobTileOuter} elevation={3}>\n        <Grid container>\n          <Grid\n            item\n            xs={2}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Avatar\n              src={`${server}${application.jobApplicant.profile}`}\n              className={classes.avatar}\n            />\n          </Grid>\n          <Grid container item xs={7} spacing={1} direction=\"column\">\n            <Grid item>\n              <Typography variant=\"h5\" style={{ color: coolColors.dark, fontWeight: \"600\" }}>\n                {application.jobApplicant.name}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Rating\n                value={\n                  application.jobApplicant.rating !== -1\n                    ? application.jobApplicant.rating\n                    : null\n                }\n                readOnly\n                size=\"small\"\n                style={{ color: coolColors.warning }}\n              />\n            </Grid>\n            <Grid item style={{ color: coolColors.neutral }}>\n              <strong>Applied:</strong> {appliedOn.toLocaleDateString()}\n            </Grid>\n            <Grid item style={{ color: coolColors.neutral }}>\n              <strong>Education:</strong>{\" \"}\n              {application.jobApplicant.education\n                .map((edu) => {\n                  return `${edu.institutionName} (${edu.startYear}-${\n                    edu.endYear ? edu.endYear : \"Ongoing\"\n                  })`;\n                })\n                .join(\", \")}\n            </Grid>\n            <Grid item style={{ color: coolColors.neutral }}>\n              <strong>SOP:</strong> {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n            </Grid>\n            <Grid item>\n              {application.jobApplicant.skills.map((skill) => (\n                <Chip \n                  label={skill} \n                  className={classes.chip} \n                  key={skill}\n                />\n              ))}\n            </Grid>\n          </Grid>\n          <Grid item container direction=\"column\" xs={3} spacing={2}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                className={`${classes.statusBlock} ${classes.downloadButton}`}\n                onClick={() => getResume()}\n              >\n                Download Resume\n              </Button>\n            </Grid>\n            <Grid item container xs>\n              {buttonSet[application.status]}\n            </Grid>\n          </Grid>\n        </Grid>\n        <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n          <Fade in={open}>\n            <Paper\n              style={{\n                padding: \"20px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                minWidth: \"30%\",\n                alignItems: \"center\",\n                borderRadius: \"15px\",\n              }}\n            >\n              <Button\n                variant=\"contained\"\n                style={{ \n                  padding: \"10px 50px\",\n                  background: `linear-gradient(45deg, ${coolColors.primary} 30%, ${coolColors.secondary} 90%)`,\n                  color: coolColors.light,\n                  borderRadius: \"30px\",\n                }}\n              >\n                Submit\n              </Button>\n            </Paper>\n          </Fade>\n        </Modal>\n      </Paper>\n    </Zoom>\n  );\n};\n\nconst JobApplications = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const { jobId } = useParams();\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [searchOptions, setSearchOptions] = useState({\n    status: {\n      all: false,\n      applied: false,\n      shortlisted: false,\n    },\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      dateOfApplication: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    setLoading(true);\n    let searchParams = [];\n\n    if (searchOptions.status.rejected) {\n      searchParams.push(`status=rejected`);\n    }\n    if (searchOptions.status.applied) {\n      searchParams.push(`status=applied`);\n    }\n    if (searchOptions.status.shortlisted) {\n      searchParams.push(`status=shortlisted`);\n    }\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          searchParams.push(`desc=${obj}`);\n        } else {\n          searchParams.push(`asc=${obj}`);\n        }\n      }\n    });\n    \n    const queryString = searchParams.join(\"&\");\n    let address = `${apiList.applicants}?jobId=${jobId}`;\n    if (queryString !== \"\") {\n      address = `${address}&${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setApplications(response.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setApplications([]);\n        setLoading(false);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response?.data?.message || \"Error fetching applications\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ \n          padding: \"30px\", \n          minHeight: \"93vh\",\n          background: `linear-gradient(120deg, #1e3c72 0%, #2a5298 100%)`,\n        }}\n      >\n        <Grid item style={{ marginBottom: \"20px\" }}>\n          <Typography variant=\"h2\" className={classes.pageTitle}>\n            Applications\n            {applications.length > 0 && (\n              <span className={classes.applicationCount}>\n                {applications.length}\n              </span>\n            )}\n          </Typography>\n        </Grid>\n        <Grid item style={{ marginBottom: \"30px\" }}>\n          <IconButton \n            onClick={() => setFilterOpen(true)}\n            className={classes.filterButton}\n          >\n            <FilterListIcon />\n          </IconButton>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {loading ? (\n            <Typography variant=\"h5\" className={classes.noApplications}>\n              Loading applications...\n            </Typography>\n          ) : applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item key={obj._id}>\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" className={classes.noApplications}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default JobApplications;","C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\CreateJobs.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\isAuth.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\component\\recruiter\\Profile.js",["115"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    minHeight: \"93vh\",\n    padding: \"30px\",\n    background: \"linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)\",\n    backgroundAttachment: \"fixed\",\n  },\n  title: {\n    color: \"white\",\n    fontWeight: \"600\",\n    marginBottom: \"30px\",\n    textTransform: \"uppercase\",\n    letterSpacing: \"2px\",\n    textShadow: \"0 2px 4px rgba(0,0,0,0.2)\",\n    animation: \"$fadeIn 0.8s ease-in-out\",\n  },\n  profileCard: {\n    padding: \"40px 30px\",\n    borderRadius: \"15px\",\n    boxShadow: \"0 10px 30px rgba(0,0,0,0.2)\",\n    background: \"white\",\n    transition: \"transform 0.4s ease, box-shadow 0.4s ease\",\n    \"&:hover\": {\n      transform: \"translateY(-10px)\",\n      boxShadow: \"0 15px 35px rgba(0,0,0,0.3)\",\n    },\n    animation: \"$slideUp 0.6s ease-out\",\n  },\n  inputField: {\n    \"& .MuiOutlinedInput-root\": {\n      borderRadius: \"10px\",\n      transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n      \"&:hover\": {\n        transform: \"translateY(-3px)\",\n        boxShadow: \"0 5px 15px rgba(30, 60, 114, 0.2)\",\n      },\n      \"&.Mui-focused\": {\n        borderColor: \"#4a00e0\",\n        boxShadow: \"0 5px 20px rgba(74, 0, 224, 0.25)\",\n      },\n    },\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#1e3c72\",\n    },\n    \"& .MuiInputLabel-outlined\": {\n      color: \"#1e3c72\",\n    },\n  },\n  bioField: {\n    \"& .MuiOutlinedInput-root\": {\n      borderRadius: \"10px\",\n      transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n      \"&:hover\": {\n        transform: \"translateY(-3px)\",\n        boxShadow: \"0 5px 15px rgba(30, 60, 114, 0.2)\",\n      },\n      \"&.Mui-focused\": {\n        borderColor: \"#4a00e0\",\n        boxShadow: \"0 5px 20px rgba(74, 0, 224, 0.25)\",\n      },\n    },\n  },\n  phoneInput: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n    \"& .form-control\": {\n      width: \"100% !important\",\n      borderRadius: \"10px !important\",\n      borderColor: \"#1e3c72 !important\",\n      height: \"56px !important\",\n      fontSize: \"16px !important\",\n      transition: \"transform 0.3s ease, box-shadow 0.3s ease !important\",\n      \"&:hover, &:focus\": {\n        transform: \"translateY(-3px)\",\n        boxShadow: \"0 5px 15px rgba(30, 60, 114, 0.2) !important\",\n        borderColor: \"#4a00e0 !important\",\n      },\n    },\n  },\n  updateButton: {\n    marginTop: \"40px\",\n    padding: \"12px 50px\",\n    borderRadius: \"30px\",\n    background: \"linear-gradient(135deg, #4a00e0 0%, #8e2de2 100%)\",\n    boxShadow: \"0 4px 15px rgba(74, 0, 224, 0.4)\",\n    color: \"white\",\n    fontWeight: \"600\",\n    transition: \"transform 0.3s ease, box-shadow 0.3s ease\",\n    \"&:hover\": {\n      background: \"linear-gradient(135deg, #3a00c0 0%, #7e1dd2 100%)\",\n      transform: \"translateY(-3px) scale(1.05)\",\n      boxShadow: \"0 8px 25px rgba(74, 0, 224, 0.5)\",\n    },\n  },\n  \"@keyframes fadeIn\": {\n    \"0%\": {\n      opacity: 0,\n    },\n    \"100%\": {\n      opacity: 1,\n    },\n  },\n  \"@keyframes slideUp\": {\n    \"0%\": {\n      opacity: 0,\n      transform: \"translateY(30px)\",\n    },\n    \"100%\": {\n      opacity: 1,\n      transform: \"translateY(0)\",\n    },\n  },\n}));\n\nconst Profile = () => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n  const [phone, setPhone] = useState(\"\");\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber.replace(\"+\", \"\"));\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response?.data?.message || \"Error fetching profile\",\n        });\n      });\n  };\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  const handleUpdate = () => {\n    const updatedDetails = {\n      ...profileDetails,\n      contactNumber: phone ? `+${phone}` : \"\",\n    };\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response?.data?.message || \"Error updating profile\",\n        });\n      });\n  };\n\n  const isWordCountValid = (text) => {\n    return text.split(\" \").filter(word => word !== \"\").length <= 250;\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      className={classes.container}\n    >\n      <Typography variant=\"h2\" className={classes.title}>\n        My Profile\n      </Typography>\n      \n      <Paper className={classes.profileCard} elevation={10}>\n        <Grid container direction=\"column\" spacing={4}>\n          <Grid item>\n            <TextField\n              label=\"Name\"\n              value={profileDetails.name}\n              onChange={(e) => handleInput(\"name\", e.target.value)}\n              variant=\"outlined\"\n              fullWidth\n              className={classes.inputField}\n            />\n          </Grid>\n          \n          <Grid item>\n            <TextField\n              label=\"Bio (up to 250 words)\"\n              multiline\n              rows={6}\n              variant=\"outlined\"\n              fullWidth\n              value={profileDetails.bio}\n              onChange={(e) => {\n                if (isWordCountValid(e.target.value)) {\n                  handleInput(\"bio\", e.target.value);\n                }\n              }}\n              className={classes.bioField}\n              helperText={`${profileDetails.bio.split(\" \").filter(word => word !== \"\").length}/250 words`}\n            />\n          </Grid>\n          \n          <Grid item>\n            <PhoneInput\n              country={\"in\"}\n              value={phone}\n              onChange={setPhone}\n              inputClass={classes.phoneInputField}\n              containerClass={classes.phoneInput}\n              buttonStyle={{ \n                backgroundColor: \"#f5f5f5\", \n                borderColor: \"#1e3c72\" \n              }}\n            />\n          </Grid>\n        </Grid>\n        \n        <Button\n          variant=\"contained\"\n          className={classes.updateButton}\n          onClick={handleUpdate}\n        >\n          Update Profile\n        </Button>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default Profile;","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\MessagePopup.js",["116"],"import { Snackbar, Slide } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst MessagePopup = (props) => {\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    props.setOpen(false);\n  };\n  return (\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\n      <Alert onClose={handleClose} severity={props.severity}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default MessagePopup;\n","C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\apiList.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\EmailInput.js",[],"C:\\job-portal\\job-portal-main\\frontend\\src\\lib\\FileUploadInput.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":19,"column":8,"nodeType":"123","messageId":"124","endLine":19,"endColumn":14},{"ruleId":"121","severity":1,"message":"125","line":4,"column":3,"nodeType":"123","messageId":"124","endLine":4,"endColumn":12},{"ruleId":"121","severity":1,"message":"126","line":10,"column":3,"nodeType":"123","messageId":"124","endLine":10,"endColumn":8},{"ruleId":"121","severity":1,"message":"127","line":15,"column":8,"nodeType":"123","messageId":"124","endLine":15,"endColumn":23},{"ruleId":"128","severity":1,"message":"129","line":443,"column":32,"nodeType":"130","messageId":"131","endLine":443,"endColumn":34},{"ruleId":"121","severity":1,"message":"132","line":9,"column":8,"nodeType":"123","messageId":"124","endLine":9,"endColumn":16},{"ruleId":"121","severity":1,"message":"133","line":40,"column":9,"nodeType":"123","messageId":"124","endLine":40,"endColumn":16},{"ruleId":"134","severity":1,"message":"135","line":108,"column":40,"nodeType":"136","endLine":108,"endColumn":42,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":382,"column":6,"nodeType":"136","endLine":382,"endColumn":8,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":16,"column":6,"nodeType":"136","endLine":16,"endColumn":8,"suggestions":"141"},{"ruleId":"121","severity":1,"message":"142","line":17,"column":8,"nodeType":"123","messageId":"124","endLine":17,"endColumn":16},{"ruleId":"121","severity":1,"message":"143","line":28,"column":16,"nodeType":"123","messageId":"124","endLine":28,"endColumn":20},{"ruleId":"134","severity":1,"message":"138","line":628,"column":6,"nodeType":"136","endLine":628,"endColumn":8,"suggestions":"144"},{"ruleId":"121","severity":1,"message":"125","line":9,"column":3,"nodeType":"123","messageId":"124","endLine":9,"endColumn":12},{"ruleId":"134","severity":1,"message":"138","line":821,"column":6,"nodeType":"136","endLine":821,"endColumn":8,"suggestions":"145"},{"ruleId":"134","severity":1,"message":"138","line":143,"column":6,"nodeType":"136","endLine":143,"endColumn":8,"suggestions":"146"},{"ruleId":"121","severity":1,"message":"147","line":1,"column":20,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'Input' is defined but never used.","'DescriptionIcon' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'FaceIcon' is defined but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchProfile'. Either include it or remove the dependency array.","ArrayExpression",["150"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.",["152"],"'MuiAlert' is defined but never used.","'Zoom' is defined but never used.",["153"],["154"],["155"],"'Slide' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"158","fix":"162"},{"desc":"158","fix":"163"},{"desc":"158","fix":"164"},"Update the dependencies array to be: [fetchProfile]",{"range":"165","text":"166"},"Update the dependencies array to be: [getData]",{"range":"167","text":"168"},"Update the dependencies array to be: [setPopup]",{"range":"169","text":"170"},{"range":"171","text":"168"},{"range":"172","text":"168"},{"range":"173","text":"168"},[3353,3355],"[fetchProfile]",[12031,12033],"[getData]",[422,424],"[setPopup]",[19139,19141],[25431,25433],[3753,3755]]